var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component, PropTypes } from 'react';
import { css, StyleSheet } from 'aphrodite/no-important';
import { Link } from 'components';
import { Grid, Row, Col } from 'react-flexbox-grid';
import Lightbox from 'react-images';
import Carousel from 'react-slick';
import ArrowBack from 'material-ui/svg-icons/hardware/keyboard-arrow-left';
import ArrowForward from 'material-ui/svg-icons/hardware/keyboard-arrow-right';
import FlatButton from 'material-ui/FlatButton';

var Gallery = function (_Component) {
  _inherits(Gallery, _Component);

  function Gallery() {
    _classCallCheck(this, Gallery);

    var _this = _possibleConstructorReturn(this, (Gallery.__proto__ || Object.getPrototypeOf(Gallery)).call(this));

    _this.openLightbox = function (index, event) {
      event.preventDefault();
      _this.setState({ currentImage: index, lightboxIsOpen: true });
    };

    _this.closeLightbox = function () {
      _this.setState({ currentImage: 0, lightboxIsOpen: false });
    };

    _this.gotoPrevious = function () {
      _this.setState({
        currentImage: _this.state.currentImage - 1
      });
    };

    _this.gotoNext = function () {
      _this.setState({
        currentImage: _this.state.currentImage + 1
      });
    };

    _this.gotoImage = function (index) {
      _this.setState({ currentImage: index });
    };

    _this.handleClickImage = function () {
      if (_this.state.currentImage === _this.props.images.length - 1) return;

      _this.gotoNext();
    };

    _this.next = function () {
      _this.slider.slickNext();
    };

    _this.previous = function () {
      _this.slider.slickPrev();
    };

    _this.state = {
      lightboxIsOpen: false,
      currentImage: 0
    };
    return _this;
  }

  //Carousel

  _createClass(Gallery, [{
    key: 'renderGallery',
    value: function renderGallery() {
      var _this2 = this;

      var settings = {
        dots: true,
        arrows: false,
        infinite: true,
        speed: 500,
        draggable: false,
        centerMode: false,
        responsive: [{
          breakpoint: 768,
          settings: {
            slidesToShow: 1
          }
        }, {
          breakpoint: 1024,
          settings: {
            slidesToShow: 3
          }
        }, {
          breakpoint: 1368,
          settings: {
            slidesToShow: 5
          }
        }, {
          breakpoint: 2000,
          settings: {
            slidesToShow: 5
          }
        }, {
          breakpoint: 100000,
          settings: 'unslick'
        }]
      };

      var images = this.props.images;


      if (!images) return;

      var gallery = images.filter(function (i) {
        return i.src;
      }).map(function (obj, i) {
        return React.createElement(
          'div',
          { key: i, className: css(classes.box) },
          React.createElement(
            'center',
            null,
            React.createElement(
              'a',
              { href: obj.src, onClick: function onClick(e) {
                  return _this2.openLightbox(i, e);
                } },
              React.createElement('img', { src: obj.thumbnail, className: css(classes.img) })
            )
          )
        );
      });

      return React.createElement(
        'div',
        { className: css(classes.gallery) },
        React.createElement(
          Carousel,
          _extends({ ref: function ref(c) {
              return _this2.slider = c;
            } }, settings),
          gallery
        ),
        React.createElement('br', null),
        React.createElement('br', null),
        React.createElement(
          'div',
          { className: 'align-center' },
          React.createElement(FlatButton, { icon: React.createElement(ArrowBack, null), onTouchTap: this.previous }),
          React.createElement(FlatButton, { icon: React.createElement(ArrowForward, null), onTouchTap: this.next })
        )
      );
    }
  }, {
    key: 'render',
    value: function render() {

      return React.createElement(
        'div',
        { className: 'section' },
        this.props.heading && React.createElement(
          'h2',
          null,
          this.props.heading
        ),
        this.props.subheading && React.createElement(
          'p',
          null,
          this.props.subheading
        ),
        this.renderGallery(),
        React.createElement(Lightbox, { currentImage: this.state.currentImage, images: this.props.images, isOpen: this.state.lightboxIsOpen, onClickImage: this.handleClickImage, onClickNext: this.gotoNext, onClickPrev: this.gotoPrevious, onClickThumbnail: this.gotoImage, onClose: this.closeLightbox, showThumbnails: this.props.showThumbnails, theme: this.props.theme })
      );
    }
  }]);

  return Gallery;
}(Component);

;

Gallery.displayName = 'Gallery';

var gutter = {
  small: 2,
  large: 4
};
var classes = StyleSheet.create({
  img: {
    width: '95%'
  },

  box: {
    textAlign: 'center'
  },

  gallery: {},

  // orientation
  landscape: {
    width: '15%'
  },
  square: {
    paddingBottom: 0,
    width: '40%',

    '@media (min-width: 500px)': {
      paddingBottom: 0
    }
  },

  // actual <img />
  source: {
    border: 0,
    display: 'block',
    height: 'auto',
    maxWidth: '100%',
    width: 'auto'
  }
});

export default Gallery;