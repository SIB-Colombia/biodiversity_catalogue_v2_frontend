{"version":3,"sources":["src/components/molecules/Field/index.js"],"names":["Error","Wrapper","div","Field","error","name","invalid","label","type","props","inputProps","id","renderInputFirst","propTypes","string","isRequired","bool","defaultProps"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;AAEA,IAAMA,QAAQ,kDAAR,iBAAN;;AAIA,IAAMC,UAAU,2BAAOC,GAAjB,kBAAN;;AAWA,IAAMC,QAAQ,SAARA,KAAQ,OAAqD;AAAA,MAAlDC,KAAkD,QAAlDA,KAAkD;AAAA,MAA3CC,IAA2C,QAA3CA,IAA2C;AAAA,MAArCC,OAAqC,QAArCA,OAAqC;AAAA,MAA5BC,KAA4B,QAA5BA,KAA4B;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAZC,KAAY;;AACjE,MAAMC,wBAAeC,IAAIN,IAAnB,EAAyBA,UAAzB,EAA+BG,UAA/B,EAAqCF,gBAArC,EAA8C,oBAAuBD,IAAvB,UAA9C,IAAqFI,KAArF,CAAN;AACA,MAAMG,mBAAmBJ,SAAS,UAAT,IAAuBA,SAAS,OAAzD;AACA,SACE;AAAC,WAAD;AAAA;AACGI,wBAAoB,iDAAWF,UAAX,CADvB;AAEGH,aAAS;AAAA;AAAA,QAAO,SAASG,WAAWC,EAA3B;AAAgCJ;AAAhC,KAFZ;AAGGK,wBAAoB,iDAAWF,UAAX,CAHvB;AAIGJ,eAAWF,KAAX,IACC;AAAC,WAAD;AAAA,QAAO,IAAOC,IAAP,UAAP,EAA2B,MAAK,OAAhC,EAAwC,SAAQ,QAAhD;AACGD;AADH;AALJ,GADF;AAYD,CAfD;;AAiBAD,MAAMU,SAAN,GAAkB;AAChBR,QAAM,oBAAUS,MAAV,CAAiBC,UADP;AAEhBT,WAAS,oBAAUU,IAFH;AAGhBZ,SAAO,oBAAUU,MAHD;AAIhBP,SAAO,oBAAUO,MAJD;AAKhBN,QAAM,oBAAUM;AALA,CAAlB;;AAQAX,MAAMc,YAAN,GAAqB;AACnBT,QAAM;AADa,CAArB;;eAIeL,K;;;;;;;;;gCA5CTH,K;;gCAIAC,O;;gCAWAE,K","file":"index.js","sourceRoot":"/home/leo/htdocs/bio","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nimport { Label, Input, Block } from 'components'\n\nconst Error = styled(Block)`\n  margin: 0.5rem 0 0;\n`\n\nconst Wrapper = styled.div`\n  margin-bottom: 1rem;\n  input[type=\"checkbox\"],\n  input[type=\"radio\"] {\n    margin-right: 0.5rem;\n  }\n  label {\n    vertical-align: middle;\n  }\n`\n\nconst Field = ({ error, name, invalid, label, type, ...props }) => {\n  const inputProps = { id: name, name, type, invalid, 'aria-describedby': `${name}Error`, ...props }\n  const renderInputFirst = type === 'checkbox' || type === 'radio'\n  return (\n    <Wrapper>\n      {renderInputFirst && <Input {...inputProps} />}\n      {label && <Label htmlFor={inputProps.id}>{label}</Label>}\n      {renderInputFirst || <Input {...inputProps} />}\n      {invalid && error &&\n        <Error id={`${name}Error`} role=\"alert\" palette=\"danger\">\n          {error}\n        </Error>\n      }\n    </Wrapper>\n  )\n}\n\nField.propTypes = {\n  name: PropTypes.string.isRequired,\n  invalid: PropTypes.bool,\n  error: PropTypes.string,\n  label: PropTypes.string,\n  type: PropTypes.string,\n}\n\nField.defaultProps = {\n  type: 'text',\n}\n\nexport default Field\n"]}