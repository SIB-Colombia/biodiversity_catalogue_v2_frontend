'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.http = http;
exports.isAuthenticated = isAuthenticated;
exports.middleware = middleware;
exports.hasRole = hasRole;
exports.me = me;
exports.signin = signin;
exports.signup = signup;
exports.logout = logout;
exports.getToken = getToken;
exports.setToken = setToken;
exports.getUser = getUser;
exports.setUser = setUser;
exports.clean = clean;

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _const = require('../const');

var _const2 = _interopRequireDefault(_const);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var rootMe = null;

//Http
function http(type, data) {

  var body = new FormData();
  if (data) for (var key in data) {
    body.append(key, data[key]);
  }data = data ? body : null;

  var config = {
    method: type,
    // mode: 'cors',
    headers: {
      'Authorization': getToken()
    },
    body: data
  };

  return config;
}

//is authenticated
function isAuthenticated() {
  return getUser();
}

//middleware

var mock = null;

function middleware(component, redirect, rolesRequired) {

  console.log('mock', mock);

  var current = mock || JSON.parse(localStorage.getItem(_const2.default.USER));

  if (current) {
    if (rolesRequired) {
      var ok = hasRole(rolesRequired, current.roles);
      if (!ok) {
        return redirect;
      } else {
        return component;
      }
    } else {
      return component;
    }
  } else {
    console.log('No hay store de usuario, relogin');
    return redirect;
    // window.location.href = '';
  }
}

//has Role
function hasRole(rolesRequired, rolesUser) {
  try {
    var isAuthorized = false;
    rolesRequired.forEach(function (rolReq) {
      rolesUser.forEach(function (RolUser) {
        if (rolReq === RolUser) isAuthorized = true;
      });
    });
    return isAuthorized;
  } catch (err) {
    return false;
  }
}

//Me

function me() {

  console.log('me');

  return (0, _isomorphicFetch2.default)(_const2.default.server.local + '/api/user/me', http('GET')).then(function (response) {
    return response.json();
  }).then(function (data) {

    if (data._id) {
      return setUser(data).then(function (user) {
        return user;
      });
    } else {
      throw { error: data.message };
    }
  }).catch(function (err) {
    clean();
  });
}

//signin
function signin(user) {
  return (0, _isomorphicFetch2.default)(_const2.default.server.local + '/auth/local', http('POST', user)).then(function (response) {
    return response.json();
  }).then(function (data) {

    if (data.token) {
      return setToken(data).then(function (token) {
        return token;
      });
    } else {
      throw { error: data.error };
    }
  }).catch(function (err) {
    return err;
  });
}

//signup
function signup(user) {
  return (0, _isomorphicFetch2.default)(_const2.default.server.local + '/api/user', http('POST', user)).then(function (response) {
    return response.json();
  }).then(function (data) {
    return data;
  }).catch(function (err) {
    return err;
  });
}

//logout
function logout() {
  clean();
  window.location.reload();
}

//Get Token
function getToken() {
  return localStorage.getItem(_const2.default.TOKEN);
}

//Set Token
function setToken(data) {
  try {
    localStorage.setItem(_const2.default.TOKEN, data.token);
  } catch (err) {
    return Promise.reject(err.message);
  }
  return Promise.resolve(data.token || null);
}

//Get User
function getUser() {
  return JSON.parse(localStorage.getItem(_const2.default.USER));
}

//Set User
function setUser(data) {
  try {
    localStorage.setItem(_const2.default.USER, JSON.stringify(data));
  } catch (err) {
    return Promise.reject(err.message);
  }
  return Promise.resolve(rootMe = data || null);
}

//Clean
function clean() {
  localStorage.clear();
}
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(rootMe, 'rootMe', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(http, 'http', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(isAuthenticated, 'isAuthenticated', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(mock, 'mock', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(middleware, 'middleware', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(hasRole, 'hasRole', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(me, 'me', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(signin, 'signin', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(signup, 'signup', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(logout, 'logout', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(getToken, 'getToken', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(setToken, 'setToken', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(getUser, 'getUser', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(setUser, 'setUser', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');

  __REACT_HOT_LOADER__.register(clean, 'clean', '/home/leo/htdocs/biodiversity_catalogue_v2_frontend/src/auth/index.js');
}();

;