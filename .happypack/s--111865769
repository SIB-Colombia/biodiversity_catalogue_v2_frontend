var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(['\n      body{\n        background-image: url(/background/23890_orig.jpg);\n        background-size: cover;\n        background-position: center center;\n        background-attachment:fixed;\n      }\n    '], ['\n      body{\n        background-image: url(/background/23890_orig.jpg);\n        background-size: cover;\n        background-position: center center;\n        background-attachment:fixed;\n      }\n    ']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PropTypes } from 'react';
import { injectGlobal } from 'styled-components';
import { PageTemplate, Header, Footer, LoginRecover } from 'components';

var LoginSignupPage = function (_React$Component) {
  _inherits(LoginSignupPage, _React$Component);

  function LoginSignupPage(props) {
    _classCallCheck(this, LoginSignupPage);

    return _possibleConstructorReturn(this, (LoginSignupPage.__proto__ || Object.getPrototypeOf(LoginSignupPage)).call(this, props));
  }

  _createClass(LoginSignupPage, [{
    key: 'componentDidMount',
    value: function componentDidMount() {}
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      injectGlobal(_templateObject);
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        PageTemplate,
        { header: React.createElement(Header, null), footer: React.createElement(Footer, null) },
        React.createElement(LoginRecover, null)
      );
    }
  }]);

  return LoginSignupPage;
}(React.Component);

export default LoginSignupPage;